Workflows:
1) Database First (project DbFirst)
	- We design our tables
	- EF generates domain classes
2) Code First
	- We create our domain classes 
	- EF generates database tables
3) Model First
	- We create a UML diagram
	- EF generates domain classes and database
------------------------------------------------------------------------------------------
EF installation:
1) NuGet Package Manager -> Package Manager Console -> PM> install-package EntityFramework
2) Right Click the Project -> Add -> New item -> ADO.NET Entity Data Model
3) .tt (T4 template file) - to generate code based on a template
---------------------------------
Database First (project DbFirst):
1) Entity Data Model Wizard
	- PlutoModel (name of ADO.NET Entity Data Model)
	- PlutoDbContext
	- Tick -> Pluralize or singularize generated object names
2) EDMX designer
	- Zooming: Ctrl + Mouse Wheel
	- If diagram looks messy: Diagram -> Layout Diagram
	- Exporting as image: Diagram -> Export as Image
	- Collapsing/Expanding: Diagram -> Collapse All/Expand All
	- Format display changing: Scalar Property Format -> Display Name/Display Name and Type
3) Uncovering the EDMX
	- Content of edmx file: PlutoModel.edmx -> Open With... -> XML (Text) Editor
		- two sections
			- EF runtime content (everything about our model), 3 subsection:
				- SSDL content (storage models = represntation of DB)
				- CSDL content (conceptual models = representation of entities)
				- C-S mapping content (mapping between storage models and conceptual models)
			- EF designer content (visual representation)
	- How to see the mapping content in a visual way?
		- EDMX designer -> right click -> Table Mapping
	- How to see the storage model and the conceptual model in a visual way?
		- EDMX designer -> right click -> Model Browser
4) Dealing with Database Changes
	- Adding a new table in DB
		- EDMX designer -> right click -> Update Model from Database...
	- Updating a table in DB
		- EDMX designer -> right click -> Update Model from Database...
		- EDMX designer -> right click -> Validate
		- EF does not see a column rename -> delete the old property from the conceptual model manually
		- EF does not delete the property which was deleted from DB -> delete in the conceptual model manually
		- EF can throw an error if EF does not know how to map data type of a column with/to data type of the property -> change data type in the conceptual model manually
	- Deleting a table
		- EDMX designer -> right click -> Update Model from Database...
			- EF knows that we have deleted, but EF does not delete it from the model -> delete this entity from the conceptual model manually
